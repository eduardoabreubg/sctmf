/*
 * ValSeqAFMV.java
 *
 * Created on 24 de Setembro de 2007, 20:26
 */

package cassolato.rafael.sctmf.view.modelos_formais.ling_regul.afmv;

import cassolato.rafael.sctmf.model.pojo.AFMV;
import cassolato.rafael.sctmf.view.components.ValidaSequenciaGUI;

/**
 *
 * @author  Cassolato
 */
public class ValSeqAFMV extends javax.swing.JPanel {
    private AfmvGUI gui = null;
    
    /** Creates new form ValSeqAFMV */
    public ValSeqAFMV(AfmvGUI gui) {
        this.gui = gui;
        this.validaSequenciaGUI = new ValidaSequenciaGUI();
        initComponents();
        posInitComponents();
    }
        
    private void posInitComponents() { 
        this.validaSequenciaGUI.setSplitPaneLocation(115);
       
        this.validaSequenciaGUI.getBValidar().addActionListener(
                new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent ae) {
                validarSequencia();
            }
        });            
    }
     
    private void validarSequencia() {        
        this.validaSequenciaGUI.validarSequencia(
                (AFMV)this.gui.getModeloFormal(),
                this.validaSequenciaGUI.getSequencia());
    }
    
    /**
     * Atualiza os dados do automato com pilha, da Area de Informações.
     */
    void observerValSeq(AFMV afmv) {   
        this.validaSequenciaGUI.clearArea();   
        this.validaSequenciaGUI.setTextAInf(
                "V = <\u03a3, S, S\u2080, \u03B4, F>\n");
                
        StringBuffer sb = new StringBuffer();
        /*
        sb.append("\u03a3 = {");  // Add Simbolos
        for(Simbolo s : afnd.getSimbolos())
            sb.append(s.getNome()+", ");                
        sb = this.validaSequenciaGUI.formataSb(sb);
                
        sb.append("S = {");
        for(Estado e : afnd.getEstados())
            sb.append("<"+e.getNome()+">, ");          
        sb = this.validaSequenciaGUI.formataSb(sb);
               
        
        sb.append("S\u2080 = {");
        for(Estado ef : afnd.getEstadosIniciais())            
            sb.append("<"+ef.getNome()+">, ");        
        sb = this.validaSequenciaGUI.formataSb(sb);
        
        sb.append("F = {");
       for(Estado e : afnd.getEstadosFinais())
            sb.append("<"+e.getNome()+">, "); 
        sb = this.validaSequenciaGUI.formataSb(sb);        
        
        for(Transicao t : afnd.getTransicoes()) {
            sb.append("\n");
            sb.append("\u03B4(<");
            sb.append(t.getEstOri().getNome());
            sb.append(">, ");
            sb.append(t.getSimbolo().getNome());
            sb.append(") = <");
            sb.append(t.getEstDest().getNome());
            sb.append(">");
        } */        
                
        this.validaSequenciaGUI.setTextAInf(sb.toString());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Código Gerado ">//GEN-BEGIN:initComponents
    private void initComponents() {
        validaSequenciaGUI = new cassolato.rafael.sctmf.view.components.ValidaSequenciaGUI();

        setLayout(new java.awt.BorderLayout());

        add(validaSequenciaGUI, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Declaração de variáveis - não modifique//GEN-BEGIN:variables
    private cassolato.rafael.sctmf.view.components.ValidaSequenciaGUI validaSequenciaGUI;
    // Fim da declaração de variáveis//GEN-END:variables
    
}
