package br.uem.din.yandre.sctmf.view.modelos_formais.ling_enum_rec.post;

import br.uem.din.yandre.sctmf.model.pojo.Estado;
import br.uem.din.yandre.sctmf.model.pojo.ModeloFormal;
import br.uem.din.yandre.sctmf.model.pojo.Post;
import br.uem.din.yandre.sctmf.model.pojo.Simbolo;
import br.uem.din.yandre.sctmf.model.pojo.TransicaoPost;
import br.uem.din.yandre.sctmf.view.modelos_formais.ModeloFormalGUI;

import java.awt.BorderLayout;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.netbeans.api.visual.widget.Widget;

/**
 *
 * @author  michelmenega
 */
public class PostGUI extends ModeloFormalGUI implements CustomGraphSceneSelectionListener {

    private CadAlfPost cadAlf = new CadAlfPost(this);
    private ValSeqPost valSeq = new ValSeqPost(this);
    private DiagramaPost diagrama = new DiagramaPost(this);
    private Set<Simbolo> simbolos = new LinkedHashSet<Simbolo>();
    private Set<TransicaoPost> transicoes = new LinkedHashSet<TransicaoPost>();
    private Set<Estado> estados = new LinkedHashSet<Estado>();
    CustomGraphScene scene;
    JScrollPane scrollPane = new JScrollPane();

    /** Creates new form PostGUI */
    public PostGUI() {
        initComponents();
        initScene();
        scene.addSelectionListener(this);
        bSelecao.setSelected(true);
    }

    private void initScene() {
        CustomGraphScene s = new CustomGraphScene(this);
        scene = s;
//        Widget oi = s.addNode("oi");
//        oi.setPreferredLocation(new Point(100, 100));
        scrollPane.setViewportView(scene.createView());
        s.setSceneTool(SceneTool.SELECAO);
        pDiagrama.add(scrollPane, BorderLayout.CENTER);
        pValSeq.add(valSeq);
    }

    public void update(CustomGraphScene s, Widget selected, Widget previous) {
        if (s == scene) {
            if (selected instanceof MostravelNaTela) {
                JPanel panel = ((MostravelNaTela) selected).getPanel();
                scrollPane.setViewportView(panel);
                ((MostravelNaTela) selected).loadState();
            }
            if (previous != null && previous instanceof MostravelNaTela) {
                ((MostravelNaTela) (previous)).saveState();
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        tpPost = new javax.swing.JTabbedPane();
        pCadAlf = new javax.swing.JPanel();
        pDiagrama = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        bEstadoPartida = new javax.swing.JToggleButton();
        bEstadoAceita = new javax.swing.JToggleButton();
        bEstadoRejeita = new javax.swing.JToggleButton();
        bEstadoLer = new javax.swing.JToggleButton();
        bEstadoAtribuicao = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        bConexao = new javax.swing.JToggleButton();
        bSelecao = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        bFix = new javax.swing.JButton();
        pValSeq = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        pCadAlf.add(this.cadAlf);
        pCadAlf.setLayout(new java.awt.GridLayout(1, 0));
        tpPost.addTab("Alfabetos", pCadAlf);

        pDiagrama.add(this.diagrama);
        pDiagrama.setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        buttonGroup1.add(bEstadoPartida);
        bEstadoPartida.setText("Partida");
        bEstadoPartida.setFocusable(false);
        bEstadoPartida.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bEstadoPartida.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bEstadoPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEstadoPartidaActionPerformed(evt);
            }
        });
        jToolBar1.add(bEstadoPartida);

        buttonGroup1.add(bEstadoAceita);
        bEstadoAceita.setText("Aceita");
        bEstadoAceita.setFocusable(false);
        bEstadoAceita.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bEstadoAceita.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bEstadoAceita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEstadoAceitaActionPerformed(evt);
            }
        });
        jToolBar1.add(bEstadoAceita);

        buttonGroup1.add(bEstadoRejeita);
        bEstadoRejeita.setText("Rejeita");
        bEstadoRejeita.setFocusable(false);
        bEstadoRejeita.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bEstadoRejeita.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bEstadoRejeita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEstadoRejeitaActionPerformed(evt);
            }
        });
        jToolBar1.add(bEstadoRejeita);

        buttonGroup1.add(bEstadoLer);
        bEstadoLer.setText("Ler");
        bEstadoLer.setFocusable(false);
        bEstadoLer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bEstadoLer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bEstadoLer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEstadoLerActionPerformed(evt);
            }
        });
        jToolBar1.add(bEstadoLer);

        buttonGroup1.add(bEstadoAtribuicao);
        bEstadoAtribuicao.setText("Atribuicao");
        bEstadoAtribuicao.setFocusable(false);
        bEstadoAtribuicao.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bEstadoAtribuicao.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bEstadoAtribuicao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEstadoAtribuicaoActionPerformed(evt);
            }
        });
        jToolBar1.add(bEstadoAtribuicao);
        jToolBar1.add(jSeparator1);

        buttonGroup1.add(bConexao);
        bConexao.setText("Conexao");
        bConexao.setFocusable(false);
        bConexao.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bConexao.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bConexao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConexaoActionPerformed(evt);
            }
        });
        jToolBar1.add(bConexao);

        buttonGroup1.add(bSelecao);
        bSelecao.setText("Selecao");
        bSelecao.setFocusable(false);
        bSelecao.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bSelecao.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bSelecao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSelecaoActionPerformed(evt);
            }
        });
        jToolBar1.add(bSelecao);
        jToolBar1.add(jSeparator2);

        bFix.setText("Fix");
        bFix.setFocusable(false);
        bFix.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bFix.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bFix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFixActionPerformed(evt);
            }
        });
        jToolBar1.add(bFix);

        pDiagrama.add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        tpPost.addTab("Diagrama", pDiagrama);

        pValSeq.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pValSeqComponentShown(evt);
            }
        });
        pValSeq.setLayout(new java.awt.GridLayout(1, 0));
        tpPost.addTab("Valid. Sequência", pValSeq);

        add(tpPost, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void pValSeqComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pValSeqComponentShown
        this.valSeq.observer((Post) this.getModeloFormal());
}//GEN-LAST:event_pValSeqComponentShown

    private void bEstadoPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEstadoPartidaActionPerformed
        if (bEstadoPartida.isSelected()) {
            scene.setSceneTool(SceneTool.INSERCAO);
        }
    }//GEN-LAST:event_bEstadoPartidaActionPerformed

    private void bConexaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConexaoActionPerformed
        if (bConexao.isSelected()) {
            scene.setSceneTool(SceneTool.ASSOCIACAO);
        }
    }//GEN-LAST:event_bConexaoActionPerformed

    private void bSelecaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSelecaoActionPerformed
        if (bSelecao.isSelected()) {
            scene.setSceneTool(SceneTool.SELECAO);
        }
    }//GEN-LAST:event_bSelecaoActionPerformed

    private void bEstadoAceitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEstadoAceitaActionPerformed
        if (bEstadoAceita.isSelected()) {
            scene.setSceneTool(SceneTool.INSERCAO);
        }
    }//GEN-LAST:event_bEstadoAceitaActionPerformed

    private void bEstadoLerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEstadoLerActionPerformed
        if (bEstadoLer.isSelected()) {
            scene.setSceneTool(SceneTool.INSERCAO);
        }
    }//GEN-LAST:event_bEstadoLerActionPerformed

    private void bEstadoAtribuicaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEstadoAtribuicaoActionPerformed
        if (bEstadoAtribuicao.isSelected()) {
            scene.setSceneTool(SceneTool.INSERCAO);
        }
    }//GEN-LAST:event_bEstadoAtribuicaoActionPerformed

    private void bFixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFixActionPerformed
        scene.doGridLayout();
    }//GEN-LAST:event_bFixActionPerformed

    private void bEstadoRejeitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEstadoRejeitaActionPerformed
        if (bEstadoRejeita.isSelected()) {
            scene.setSceneTool(SceneTool.INSERCAO);
        }
    }//GEN-LAST:event_bEstadoRejeitaActionPerformed

    public void setModeloFormal(ModeloFormal mf) {
        Post post = (Post) mf;
        this.cadAlf.setSimbAfabeto(post.getAlfabeto());
        this.tpPost.setSelectedIndex(0);
    }

    public ModeloFormal getModeloFormal() {
        Post post = new Post();
        post.setAlfabeto(this.cadAlf.getSimbAfabeto());
        post.setEstados(this.getEstados());
        post.setTransicoes(this.getTransicoes());
        return post;
    }

    void addSimbolo(Simbolo simbolo, int cod) {
        if (!this.simbolos.contains(simbolo)) {
            this.simbolos.add(simbolo);
        }
    }

    void removeSimbolo(Simbolo simbolo, int cod) {
        if (this.simbolos.contains(simbolo)) {
            this.simbolos.remove(simbolo);
        }
    }

    void addTransicao(TransicaoPost t) {

            this.transicoes.add(t);

    }

    void removeTransicao(TransicaoPost t) {

            this.transicoes.remove(t);

    }

    void addEstado(Estado e) {
        if (!this.estados.contains(e)) {
            this.estados.add(e);
        }
    }

    void removeEstado(Estado e) {
        if (!this.estados.contains(e)) {
            this.estados.add(e);
        }
    }

    public Set<Simbolo> getSimbolos() {
        return simbolos;
    }

    public void setSimbolos(Set<Simbolo> simbolos) {
        this.simbolos = simbolos;
    }

    public Set<TransicaoPost> getTransicoes() {
        return transicoes;
    }

    public void setTransicoes(Set<TransicaoPost> transicoes) {
        this.transicoes = transicoes;
    }

    public Set<Estado> getEstados() {
        return estados;
    }

    public void setEstados(Set<Estado> estados) {
        this.estados = estados;
    }
    /*
    void addEstado(Estado estado) {
    this.cadFTrans.observer(estado, true);
    }
    
    void removeEstado(Estado estado) {
    this.cadFTrans.observer(estado, false);
    }    */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JToggleButton bConexao;
    public static javax.swing.JToggleButton bEstadoAceita;
    public static javax.swing.JToggleButton bEstadoAtribuicao;
    public static javax.swing.JToggleButton bEstadoLer;
    public static javax.swing.JToggleButton bEstadoPartida;
    public static javax.swing.JToggleButton bEstadoRejeita;
    private javax.swing.JButton bFix;
    public static javax.swing.JToggleButton bSelecao;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel pCadAlf;
    private javax.swing.JPanel pDiagrama;
    private javax.swing.JPanel pValSeq;
    private javax.swing.JTabbedPane tpPost;
    // End of variables declaration//GEN-END:variables
    }
