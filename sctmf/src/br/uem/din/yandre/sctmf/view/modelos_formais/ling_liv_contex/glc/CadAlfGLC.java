/*
 * CadAlfGLC.java
 *
 * Created on 7 de Agosto de 2007, 08:39
 */

package br.uem.din.yandre.sctmf.view.modelos_formais.ling_liv_contex.glc;

import br.uem.din.yandre.sctmf.model.pojo.SimboloString;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Set;

/**
 *
 * @author  rafael2009_00
 */
public class CadAlfGLC extends javax.swing.JPanel {
    
    private GlcGUI glcGUI;
    
    /** Creates new form CadAlfGLC */
    public CadAlfGLC(GlcGUI glcGUI) {
        this.glcGUI = glcGUI;
        initComponents();
        posInitComponents();
    }
    
    /**
     * Retorna os simbolos terminais cadastrados
     */
    Set<SimboloString> getSimbTerminais() {
        Set<SimboloString> simbolos = new LinkedHashSet<SimboloString>();
        for(Object o : this.listTerm.getAllItens())
            simbolos.add(new SimboloString((String)o));
            
        return simbolos;
    }
    
    /**
     * Retorna os simbolos nao-terminais cadastrados
     */
    Set<SimboloString> getSimNTermimais() {
        Set<SimboloString> simbolos = new LinkedHashSet<SimboloString>();
        for(Object o : this.listNTerm.getAllItens())
            simbolos.add(new SimboloString((String)o));
            
        return simbolos;
    }
    
    /**
     * Limpa a lista dos simbolos terminais e add os recebidos no parametro.
     */
    void setSimTerminais(Collection<SimboloString> simbolos) {
        this.listTerm.removeAllItens();
        
        for(SimboloString s :simbolos )
            this.listTerm.addItem(s.getNome());
    }
    
    /**
     * Limpa a lista dos simbolos nao-terminais e add os recebidos no parametro.
     */
    void setSimNTerminais(Collection<SimboloString> simbolos) {
        this.listNTerm.removeAllItens();
        
        for(SimboloString s :simbolos)
            this.listNTerm.addItem(s.getNome());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        listNTerm = new br.uem.din.yandre.sctmf.view.components.GenericJList();
        jPanel5 = new javax.swing.JPanel();
        listTerm = new br.uem.din.yandre.sctmf.view.components.GenericJList();
        jLabel5 = new javax.swing.JLabel();
        fSimbolo = new javax.swing.JTextField();
        addRemButtonsNTerm = new br.uem.din.yandre.sctmf.view.components.AddRemButtonsPanel();
        addRemButtonsTerm = new br.uem.din.yandre.sctmf.view.components.AddRemButtonsPanel();

        jPanel4.setToolTipText("Símbolos do Alfabeto da Linguagem");
        jPanel4.setLayout(new java.awt.BorderLayout());

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("V");
        jLabel4.setToolTipText("Símbolos Não-Terminais");
        jPanel4.add(jLabel4, java.awt.BorderLayout.NORTH);

        listNTerm.setToolTipText("");
        jPanel4.add(listNTerm, java.awt.BorderLayout.CENTER);

        jPanel5.setToolTipText("Símbolos do Alfabeto da Pilha");
        jPanel5.setLayout(new java.awt.BorderLayout());

        listTerm.setToolTipText("");
        jPanel5.add(listTerm, java.awt.BorderLayout.CENTER);

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("T");
        jLabel5.setToolTipText("Símbolos Terminais");
        jPanel5.add(jLabel5, java.awt.BorderLayout.NORTH);

        fSimbolo.setName(""); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addRemButtonsNTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(addRemButtonsTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(fSimbolo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(fSimbolo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addRemButtonsTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addRemButtonsNTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(11, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
     private void posInitComponents() {
         // Para o alfabeto dos Termbolos nao-terminais
        this.addRemButtonsNTerm.getBAdd().addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent ae) {
                addActionNTerm(null);
            }
        });
        
        this.addRemButtonsNTerm.getBRemove().addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent ae) {
                removeActionNTerm();
            }
        });
        
        // Para o alfabeto dos Termbolos da pilha
        this.addRemButtonsTerm.getBAdd().addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent ae) {
                addActionTerm(null);
            }
        });
        
        this.addRemButtonsTerm.getBRemove().addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent ae) {
                removeActionTerm();
            }
        });
    }
    
    private void removeActionNTerm() {
      for(Object o : this.listNTerm.removeItens())
          this.glcGUI.removeSimbolo(new SimboloString((String)o), false);
    }
        
    private void addActionNTerm(SimboloString simbNTerm) {
        if(simbNTerm==null) {
            String s = this.fSimbolo.getText();
            if (s.isEmpty()) return;
            String sUpper = s.toUpperCase();
            int i;
            for (i = 0; i < s.length(); i++) {
                char c = s.charAt(i);
                if (c != Character.toUpperCase(c)) break;
            }
            if (i != s.length()) {
                javax.swing.JOptionPane.showMessageDialog(
                        this,
                        "Os símbolos não terminais devem conter apenas " +
                        "letras maiúsculas",
                        "Atenção",
                        javax.swing.JOptionPane.WARNING_MESSAGE);
            }
            simbNTerm = new SimboloString(sUpper);
        }
        if (!this.listTerm.containsItem(simbNTerm.getNome())) {
             this.listNTerm.addItem(simbNTerm.getNome());
             this.glcGUI.addSimbolo(simbNTerm, false);
             this.fSimbolo.setText("");
        } else {
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    "Simbolo já inserido no conjunto de\n" +
                    "Símbolos Terminais",
                    "Atenção",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
       
    private void removeActionTerm() {
        for(Object o : this.listTerm.removeItens())
            this.glcGUI.removeSimbolo(new SimboloString((String)o), true);
    }
        
    private void addActionTerm(SimboloString simbTerm) { 
        if(simbTerm==null) {
            String s = this.fSimbolo.getText();
            if (s.isEmpty()) return;
            String sLower = s.toLowerCase();
            int i;
            for (i = 0; i < s.length(); i++) {
                char c = s.charAt(i);
                if (c != Character.toLowerCase(c)) break;
            }
            if (i != s.length()) {
                javax.swing.JOptionPane.showMessageDialog(
                        this,
                        "Os símbolos terminais devem conter apenas letras " +
                        "minúsculas",
                        "Atenção",
                        javax.swing.JOptionPane.WARNING_MESSAGE);
            }
            simbTerm = new SimboloString(sLower);
        }
        
        if (!this.listNTerm.containsItem(simbTerm.getNome())) {
             this.listTerm.addItem(simbTerm.getNome());
             this.glcGUI.addSimbolo(simbTerm, true);
             this.fSimbolo.setText("");
        } else {
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    "Simbolo já inserido no conjunto de\n" +
                    "Símbolos Não-Terminais",
                    "Atenção",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private br.uem.din.yandre.sctmf.view.components.AddRemButtonsPanel addRemButtonsNTerm;
    private br.uem.din.yandre.sctmf.view.components.AddRemButtonsPanel addRemButtonsTerm;
    private javax.swing.JTextField fSimbolo;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private br.uem.din.yandre.sctmf.view.components.GenericJList listNTerm;
    private br.uem.din.yandre.sctmf.view.components.GenericJList listTerm;
    // End of variables declaration//GEN-END:variables
    
}
