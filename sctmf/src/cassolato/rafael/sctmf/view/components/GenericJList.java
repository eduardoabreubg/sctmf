/*
 * GenericJList.java
 *
 * Created on 3 de Maio de 2007, 09:21
 */

package cassolato.rafael.sctmf.view.components;

import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.swing.DefaultListModel;

/**
 *
 * @author  rafael2009_00
 */
public class GenericJList extends javax.swing.JScrollPane {
    
    private DefaultListModel dlm = new DefaultListModel();
    
    /** Creates new form BeanForm */
    public GenericJList() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jList = new javax.swing.JList();

        jList.setFont(new java.awt.Font("Verdana", 1, 14));
        jList.setModel(this.dlm);
        setViewportView(jList);

    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Add o Item na JList, se o item foi add com sucesso
     * retorna o Character, caso não retorna null;
     *
     * @param item
     * @return Character
     */
    public Character addItem(Character item) {
        if(!this.dlm.contains(item)) {
            this.dlm.addElement(item); 
            return item;
            
        }else
            return null;
    }
    
    /**
     * Add o Item na JList, se o item foi add com sucesso
     * retorna a String, caso não retorna null;
     *
     * @param item
     * @return String
     */
    public String addItem(String item) {
        if(!this.dlm.contains(item)) {
            this.dlm.addElement(item);
            return item;
            
        }else
            return null;
            
    }
    
    /**
     * Remove o item recebido no parametro da JList.
     *
     * @param item
     */
    public void removeItem(Object item) {
        this.dlm.removeElement(item);
    }
    
    /**
     * Remove todos os itens da JList
     */
    public void removeAllItens() {
        this.dlm.removeAllElements();  
    }
    
    /**
     * Remove os Itens selecionados na JList
     *
     */
    public Object[] removeItens() {        
        Object[] itens = this.jList.getSelectedValues();
        
        if(itens.length>0)
            for(int i=0;i<itens.length;i++)
                this.dlm.removeElement(itens[i]);
        
        return itens;
        
    }
    
    /**
     * Retorna todos os itens da JList em uma<br>
     * coleção de Object.
     * 
     * @return Collection
     */
    public Collection<Object> getAllItens() {        
        Set<Object> itens = new LinkedHashSet<Object>();    
        int size = this.dlm.size();
        
        for(int i=0;i<size;i++)
            itens.add(this.dlm.getElementAt(i));
        
        return itens;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList;
    // End of variables declaration//GEN-END:variables
    
}
